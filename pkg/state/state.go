package state

import (
	log "github.com/sirupsen/logrus"
	"io"
	"io/ioutil"
	"sync"
)

func getFonts() []byte {
	f := []byte{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
	}
	return f
}

type Memory []uint8

func (m Memory) LoadMemory(r io.Reader) (err error) {
	f := getFonts()
	for i := range f {
		m[i] = f[i]
	}
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return err
	}
	log.Infof("loading %d bytes", len(b))
	for i := range b {
		m[i+512] = b[i]
	}
	return err
}

func InitMemory() Memory {
	return make(Memory, 4096)
}

type Stack struct {
	l sync.Mutex
	s []int16
	i int8
}

func (s *Stack) Pop() (val int16) {
	s.l.Lock()
	defer s.l.Unlock()
	val = s.s[s.i]
	s.i -= 1
	return val
}

func (s *Stack) Push(val int16) {
	s.l.Lock()
	defer s.l.Unlock()
	s.i += 1
	s.s[s.i] = val
}

func (s *Stack) Len() (length int8) {
	s.l.Lock()
	defer s.l.Unlock()
	return s.i + 1
}

func InitStack() *Stack {
	return &Stack{
		s: make([]int16, 16),
		i: -1,
	}
}
